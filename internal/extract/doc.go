// Package extract provides functionality for parsing and extracting information from SQL statements.
// It uses TiDB's SQL parser to analyze SQL queries and produces templatized versions of the queries
// along with extracted parameters and table information.
//
// The package supports multiple SQL operations including SELECT, INSERT, UPDATE, and DELETE statements.
// It can handle complex SQL features such as JOINs, subqueries, aggregate functions, and various SQL
// expressions (LIKE, IN, BETWEEN, etc.).
//
// Example usage:
//
//	extractor := extract.NewExtractor()
//	sql := "SELECT * FROM users WHERE age > 18 AND name LIKE 'John%'"
//	templatedSQL, tableInfos, params, opType, err := extractor.Extract(sql)
//	if err != nil {
//	    log.Fatal(err)
//	}
//	// templatedSQL: "SELECT * FROM users WHERE age > ? AND name LIKE ?"
//	// params: []any{18, "John%"}
//	// tableInfos: contains information about the "users" table
//	// opType: models.SQLOperationSelect
//
// The package implements a visitor pattern through ExtractVisitor to traverse the AST (Abstract Syntax Tree)
// generated by the SQL parser. It maintains a pool of visitors for better performance when processing
// multiple SQL statements.
//
// Key Features:
//   - SQL templatization: Converts literal values to parameterized placeholders
//   - Table information extraction: Captures schema and table names used in queries
//   - Parameter extraction: Collects literal values from the SQL in order of appearance
//   - Operation type detection: Identifies the type of SQL operation (SELECT/INSERT/UPDATE/DELETE)
//   - Multi-statement support: Can process multiple SQL statements separated by semicolons
//   - Thread-safe: Uses sync.Pool for visitor objects to handle concurrent processing
//
// The package is designed to be used internally by the sql-extractor tool and provides
// the core functionality for SQL analysis and transformation.
package extract
